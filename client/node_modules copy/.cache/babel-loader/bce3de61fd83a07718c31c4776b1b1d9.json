{"ast":null,"code":"import { ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_DETAILS_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_MINE_LIST_FAIL, ORDER_MINE_LIST_REQUEST, ORDER_MINE_LIST_SUCCESS, ORDERS_LIST_REQUEST, ORDERS_LIST_SUCCESS, ORDERS_LIST_FAIL, ORDER_DELETE_REQUEST, ORDER_DELETE_SUCCESS, ORDER_DELETE_FAIL } from \"../Constants/orderConstants\";\nimport { ORDER_PAY_REQUEST, ORDER_PAY_FAIL, ORDER_PAY_SUCCESS } from \"../Constants/orderConstants\";\nimport Axios from \"axios\";\nimport { CART_EMPTY } from \"../Constants/CartConstants\";\nexport const createOrder = order => async (dispatch, getState) => {\n  dispatch({\n    type: ORDER_CREATE_REQUEST,\n    payload: order\n  });\n\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState(); //getState return the whole redux store\n\n    console.log({\n      order\n    });\n    const {\n      data\n    } = await Axios.post(\"/api/orders\", order, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data.order\n    });\n    dispatch({\n      type: CART_EMPTY\n    });\n    localStorage.removeItem(\"cartItems\");\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const detailsOrder = orderId => async (dispatch, getState) => {\n  dispatch({\n    type: ORDER_DETAILS_REQUEST,\n    payload: orderId\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/orders/${orderId}`, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const payOrder = (order, paymentResult) => async (dispatch, getState) => {\n  dispatch({\n    type: ORDER_PAY_REQUEST,\n    payload: {\n      order,\n      paymentResult\n    }\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = Axios.put(`/api/orders/${order._id}/pay`, paymentResult, {\n      headers: {\n        Authorisation: `Bearer${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listOrderMine = () => async (dispatch, getState) => {\n  dispatch({\n    type: ORDER_MINE_LIST_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.get(\"/api/orders/mine\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: ORDER_MINE_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: ORDER_MINE_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listOrders = () => async (dispatch, getState) => {\n  dispatch({\n    type: ORDERS_LIST_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.get(\"/api/orders\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: ORDERS_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: ORDERS_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deleteOrder = orderId => async (dispatch, getState) => {\n  dispatch({\n    type: ORDER_DELETE_REQUEST,\n    payload: orderId\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/orders/${orderId}`, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: ORDER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DELETE_FAIL,\n      payload: {\n        message: //check if response and message exist then return the message otherwise return a general error message\n        error.response && error.response.data.message ? error.response.data.message : error.message\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/filippo/Documents/DCI/myProjects/TheNakedMoon/Frontend/src/Actions/orderAction.js"],"names":["ORDER_CREATE_FAIL","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_DETAILS_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_MINE_LIST_FAIL","ORDER_MINE_LIST_REQUEST","ORDER_MINE_LIST_SUCCESS","ORDERS_LIST_REQUEST","ORDERS_LIST_SUCCESS","ORDERS_LIST_FAIL","ORDER_DELETE_REQUEST","ORDER_DELETE_SUCCESS","ORDER_DELETE_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_FAIL","ORDER_PAY_SUCCESS","Axios","CART_EMPTY","createOrder","order","dispatch","getState","type","payload","userSignin","userInfo","console","log","data","post","headers","Authorization","token","localStorage","removeItem","error","response","message","detailsOrder","orderId","get","payOrder","paymentResult","put","_id","Authorisation","listOrderMine","listOrders","deleteOrder"],"mappings":"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","sourcesContent":["import {\n  ORDER_CREATE_FAIL,\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_DETAILS_FAIL,\n  ORDER_DETAILS_REQUEST,\n  ORDER_DETAILS_SUCCESS,\n  ORDER_MINE_LIST_FAIL,\n  ORDER_MINE_LIST_REQUEST,\n  ORDER_MINE_LIST_SUCCESS,\n  ORDERS_LIST_REQUEST,\n  ORDERS_LIST_SUCCESS,\n  ORDERS_LIST_FAIL,\n  ORDER_DELETE_REQUEST,\n  ORDER_DELETE_SUCCESS,\n  ORDER_DELETE_FAIL,\n  \n} from \"../Constants/orderConstants\";\nimport {\n  ORDER_PAY_REQUEST,\n  ORDER_PAY_FAIL,\n  ORDER_PAY_SUCCESS,\n} from \"../Constants/orderConstants\";\nimport Axios from \"axios\";\nimport { CART_EMPTY } from \"../Constants/CartConstants\";\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n  dispatch({ type: ORDER_CREATE_REQUEST, payload: order });\n  try {\n    const {\n      userSignin: { userInfo },\n    } = getState(); //getState return the whole redux store\n    console.log({ order });\n    const { data } = await Axios.post(\"/api/orders\", order, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    });\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: data.order });\n    dispatch({ type: CART_EMPTY });\n    localStorage.removeItem(\"cartItems\");\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const detailsOrder = (orderId) => async (dispatch, getState) => {\n  dispatch({ type: ORDER_DETAILS_REQUEST, payload: orderId });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n  try {\n    const { data } = await Axios.get(`/api/orders/${orderId}`, {\n      headers: { Authorization: `Bearer ${userInfo.token}` },\n    });\n    dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: ORDER_DETAILS_FAIL, payload: message });\n  }\n};\nexport const payOrder = (order, paymentResult) => async (\n  dispatch,\n  getState\n) => {\n  dispatch({ type: ORDER_PAY_REQUEST, payload: { order, paymentResult } });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n  try {\n    const { data } = Axios.put(`/api/orders/${order._id}/pay`, paymentResult, {\n      headers: { Authorisation: `Bearer${userInfo.token}` },\n    });\n    dispatch({ type: ORDER_PAY_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: ORDER_PAY_FAIL, payload: message });\n  }\n};\nexport const listOrderMine = () => async (dispatch, getState) => {\n  dispatch({ type: ORDER_MINE_LIST_REQUEST });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n  try {\n    const { data } = await Axios.get(\"/api/orders/mine\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    });\n    dispatch({ type: ORDER_MINE_LIST_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: ORDER_MINE_LIST_FAIL, payload: message });\n  }\n};\nexport const listOrders = () => async (dispatch, getState) => {\n  dispatch({ type: ORDERS_LIST_REQUEST });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n  try {\n    const { data } = await Axios.get(\"/api/orders\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    });\n    dispatch({ type: ORDERS_LIST_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: ORDERS_LIST_FAIL, payload: message });\n  }\n};\nexport const deleteOrder = (orderId) => async (dispatch, getState) => {\n  dispatch({ type: ORDER_DELETE_REQUEST, payload: orderId });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n  try {\n    const { data } = await Axios.get(`/api/orders/${orderId}`, {\n      headers: { Authorization: `Bearer ${userInfo.token}` },\n    });\n    dispatch({ type: ORDER_DELETE_SUCCESS });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DELETE_FAIL,\n      payload: {\n        message:\n        //check if response and message exist then return the message otherwise return a general error message\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}