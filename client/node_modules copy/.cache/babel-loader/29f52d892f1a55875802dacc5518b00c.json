{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar react_1 = require(\"react\");\n\nvar screenfull_1 = tslib_1.__importDefault(require(\"screenfull\"));\n\nvar useIsomorphicLayoutEffect_1 = tslib_1.__importDefault(require(\"./useIsomorphicLayoutEffect\"));\n\nvar noop = function noop() {};\n\nvar useFullscreen = function useFullscreen(ref, on, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var video = options.video,\n      _a = options.onClose,\n      onClose = _a === void 0 ? noop : _a;\n\n  var _b = react_1.useState(on),\n      isFullscreen = _b[0],\n      setIsFullscreen = _b[1];\n\n  useIsomorphicLayoutEffect_1.default(function () {\n    if (!on) {\n      return;\n    }\n\n    if (!ref.current) {\n      return;\n    }\n\n    var onWebkitEndFullscreen = function onWebkitEndFullscreen() {\n      video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n      onClose();\n    };\n\n    var onChange = function onChange() {\n      if (screenfull_1.default.isEnabled) {\n        var isScreenfullFullscreen = screenfull_1.default.isFullscreen;\n        setIsFullscreen(isScreenfullFullscreen);\n\n        if (!isScreenfullFullscreen) {\n          onClose();\n        }\n      }\n    };\n\n    if (screenfull_1.default.isEnabled) {\n      try {\n        screenfull_1.default.request(ref.current);\n        setIsFullscreen(true);\n      } catch (error) {\n        onClose(error);\n        setIsFullscreen(false);\n      }\n\n      screenfull_1.default.on('change', onChange);\n    } else if (video && video.current && video.current.webkitEnterFullscreen) {\n      video.current.webkitEnterFullscreen();\n      video.current.addEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n      setIsFullscreen(true);\n    } else {\n      onClose();\n      setIsFullscreen(false);\n    }\n\n    return function () {\n      setIsFullscreen(false);\n\n      if (screenfull_1.default.isEnabled) {\n        try {\n          screenfull_1.default.off('change', onChange);\n          screenfull_1.default.exit();\n        } catch (_a) {}\n      } else if (video && video.current && video.current.webkitExitFullscreen) {\n        video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n        video.current.webkitExitFullscreen();\n      }\n    };\n  }, [on, video, ref]);\n  return isFullscreen;\n};\n\nexports.default = useFullscreen;","map":{"version":3,"sources":["/Users/filippo/Documents/DCI/myProjects/TheNakedMoon/Frontend/node_modules/react-use/lib/useFullscreen.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","react_1","screenfull_1","__importDefault","useIsomorphicLayoutEffect_1","noop","useFullscreen","ref","on","options","video","_a","onClose","_b","useState","isFullscreen","setIsFullscreen","default","current","onWebkitEndFullscreen","removeEventListener","onChange","isEnabled","isScreenfullFullscreen","request","error","webkitEnterFullscreen","addEventListener","off","exit","webkitExitFullscreen"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar react_1 = require(\"react\");\nvar screenfull_1 = tslib_1.__importDefault(require(\"screenfull\"));\nvar useIsomorphicLayoutEffect_1 = tslib_1.__importDefault(require(\"./useIsomorphicLayoutEffect\"));\nvar noop = function () { };\nvar useFullscreen = function (ref, on, options) {\n    if (options === void 0) { options = {}; }\n    var video = options.video, _a = options.onClose, onClose = _a === void 0 ? noop : _a;\n    var _b = react_1.useState(on), isFullscreen = _b[0], setIsFullscreen = _b[1];\n    useIsomorphicLayoutEffect_1.default(function () {\n        if (!on) {\n            return;\n        }\n        if (!ref.current) {\n            return;\n        }\n        var onWebkitEndFullscreen = function () {\n            video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n            onClose();\n        };\n        var onChange = function () {\n            if (screenfull_1.default.isEnabled) {\n                var isScreenfullFullscreen = screenfull_1.default.isFullscreen;\n                setIsFullscreen(isScreenfullFullscreen);\n                if (!isScreenfullFullscreen) {\n                    onClose();\n                }\n            }\n        };\n        if (screenfull_1.default.isEnabled) {\n            try {\n                screenfull_1.default.request(ref.current);\n                setIsFullscreen(true);\n            }\n            catch (error) {\n                onClose(error);\n                setIsFullscreen(false);\n            }\n            screenfull_1.default.on('change', onChange);\n        }\n        else if (video && video.current && video.current.webkitEnterFullscreen) {\n            video.current.webkitEnterFullscreen();\n            video.current.addEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n            setIsFullscreen(true);\n        }\n        else {\n            onClose();\n            setIsFullscreen(false);\n        }\n        return function () {\n            setIsFullscreen(false);\n            if (screenfull_1.default.isEnabled) {\n                try {\n                    screenfull_1.default.off('change', onChange);\n                    screenfull_1.default.exit();\n                }\n                catch (_a) { }\n            }\n            else if (video && video.current && video.current.webkitExitFullscreen) {\n                video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n                video.current.webkitExitFullscreen();\n            }\n        };\n    }, [on, video, ref]);\n    return isFullscreen;\n};\nexports.default = useFullscreen;\n"]},"metadata":{},"sourceType":"script"}