{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar util_1 = require(\"./util\");\n\nvar noop = function noop() {};\n\nvar useLocalStorage = function useLocalStorage(key, initialValue, options) {\n  if (!util_1.isClient) {\n    return [initialValue, noop, noop];\n  }\n\n  if (!key) {\n    throw new Error('useLocalStorage key may not be falsy');\n  }\n\n  var deserializer = options ? options.raw ? function (value) {\n    return value;\n  } : options.deserializer : JSON.parse; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  var _a = react_1.useState(function () {\n    try {\n      var serializer = options ? options.raw ? String : options.serializer : JSON.stringify;\n      var localStorageValue = localStorage.getItem(key);\n\n      if (localStorageValue !== null) {\n        return deserializer(localStorageValue);\n      } else {\n        initialValue && localStorage.setItem(key, serializer(initialValue));\n        return initialValue;\n      }\n    } catch (_a) {\n      // If user is in private mode or has storage restriction\n      // localStorage can throw. JSON.parse and JSON.stringify\n      // can throw, too.\n      return initialValue;\n    }\n  }),\n      state = _a[0],\n      setState = _a[1]; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n  var set = react_1.useCallback(function (valOrFunc) {\n    try {\n      var newState = typeof valOrFunc === 'function' ? valOrFunc(state) : valOrFunc;\n      if (typeof newState === 'undefined') return;\n      var value = void 0;\n      if (options) {\n        if (options.raw) {\n          if (typeof newState === 'string') value = newState;else value = JSON.stringify(newState);\n        } else if (options.serializer) value = options.serializer(newState);else value = JSON.stringify(newState);\n      } else value = JSON.stringify(newState);\n      localStorage.setItem(key, value);\n      setState(deserializer(value));\n    } catch (_a) {// If user is in private mode or has storage restriction\n      // localStorage can throw. Also JSON.stringify can throw.\n    }\n  }, [key, setState]); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  var remove = react_1.useCallback(function () {\n    try {\n      localStorage.removeItem(key);\n      setState(undefined);\n    } catch (_a) {// If user is in private mode or has storage restriction\n      // localStorage can throw.\n    }\n  }, [key, setState]);\n  return [state, set, remove];\n};\n\nexports.default = useLocalStorage;","map":{"version":3,"sources":["/Users/filippo/Documents/DCI/myProjects/TheNakedMoon/Frontend/node_modules/react-use/lib/useLocalStorage.js"],"names":["Object","defineProperty","exports","value","react_1","require","util_1","noop","useLocalStorage","key","initialValue","options","isClient","Error","deserializer","raw","JSON","parse","_a","useState","serializer","String","stringify","localStorageValue","localStorage","getItem","setItem","state","setState","set","useCallback","valOrFunc","newState","remove","removeItem","undefined","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIE,IAAI,GAAG,SAAPA,IAAO,GAAY,CAAG,CAA1B;;AACA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,GAAV,EAAeC,YAAf,EAA6BC,OAA7B,EAAsC;AACxD,MAAI,CAACL,MAAM,CAACM,QAAZ,EAAsB;AAClB,WAAO,CAACF,YAAD,EAAeH,IAAf,EAAqBA,IAArB,CAAP;AACH;;AACD,MAAI,CAACE,GAAL,EAAU;AACN,UAAM,IAAII,KAAJ,CAAU,sCAAV,CAAN;AACH;;AACD,MAAIC,YAAY,GAAGH,OAAO,GAAIA,OAAO,CAACI,GAAR,GAAc,UAAUZ,KAAV,EAAiB;AAAE,WAAOA,KAAP;AAAe,GAAhD,GAAmDQ,OAAO,CAACG,YAA/D,GAA+EE,IAAI,CAACC,KAA9G,CAPwD,CAQxD;;AACA,MAAIC,EAAE,GAAGd,OAAO,CAACe,QAAR,CAAiB,YAAY;AAClC,QAAI;AACA,UAAIC,UAAU,GAAGT,OAAO,GAAIA,OAAO,CAACI,GAAR,GAAcM,MAAd,GAAuBV,OAAO,CAACS,UAAnC,GAAiDJ,IAAI,CAACM,SAA9E;AACA,UAAIC,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqBhB,GAArB,CAAxB;;AACA,UAAIc,iBAAiB,KAAK,IAA1B,EAAgC;AAC5B,eAAOT,YAAY,CAACS,iBAAD,CAAnB;AACH,OAFD,MAGK;AACDb,QAAAA,YAAY,IAAIc,YAAY,CAACE,OAAb,CAAqBjB,GAArB,EAA0BW,UAAU,CAACV,YAAD,CAApC,CAAhB;AACA,eAAOA,YAAP;AACH;AACJ,KAVD,CAWA,OAAOQ,EAAP,EAAW;AACP;AACA;AACA;AACA,aAAOR,YAAP;AACH;AACJ,GAlBQ,CAAT;AAAA,MAkBIiB,KAAK,GAAGT,EAAE,CAAC,CAAD,CAlBd;AAAA,MAkBmBU,QAAQ,GAAGV,EAAE,CAAC,CAAD,CAlBhC,CATwD,CA4BxD;;;AACA,MAAIW,GAAG,GAAGzB,OAAO,CAAC0B,WAAR,CAAoB,UAAUC,SAAV,EAAqB;AAC/C,QAAI;AACA,UAAIC,QAAQ,GAAG,OAAOD,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAACJ,KAAD,CAA3C,GAAqDI,SAApE;AACA,UAAI,OAAOC,QAAP,KAAoB,WAAxB,EACI;AACJ,UAAI7B,KAAK,GAAG,KAAK,CAAjB;AACA,UAAIQ,OAAJ;AACI,YAAIA,OAAO,CAACI,GAAZ;AACI,cAAI,OAAOiB,QAAP,KAAoB,QAAxB,EACI7B,KAAK,GAAG6B,QAAR,CADJ,KAGI7B,KAAK,GAAGa,IAAI,CAACM,SAAL,CAAeU,QAAf,CAAR;AAJR,eAKK,IAAIrB,OAAO,CAACS,UAAZ,EACDjB,KAAK,GAAGQ,OAAO,CAACS,UAAR,CAAmBY,QAAnB,CAAR,CADC,KAGD7B,KAAK,GAAGa,IAAI,CAACM,SAAL,CAAeU,QAAf,CAAR;AATR,aAWI7B,KAAK,GAAGa,IAAI,CAACM,SAAL,CAAeU,QAAf,CAAR;AACJR,MAAAA,YAAY,CAACE,OAAb,CAAqBjB,GAArB,EAA0BN,KAA1B;AACAyB,MAAAA,QAAQ,CAACd,YAAY,CAACX,KAAD,CAAb,CAAR;AACH,KAnBD,CAoBA,OAAOe,EAAP,EAAW,CACP;AACA;AACH;AACJ,GAzBS,EAyBP,CAACT,GAAD,EAAMmB,QAAN,CAzBO,CAAV,CA7BwD,CAuDxD;;AACA,MAAIK,MAAM,GAAG7B,OAAO,CAAC0B,WAAR,CAAoB,YAAY;AACzC,QAAI;AACAN,MAAAA,YAAY,CAACU,UAAb,CAAwBzB,GAAxB;AACAmB,MAAAA,QAAQ,CAACO,SAAD,CAAR;AACH,KAHD,CAIA,OAAOjB,EAAP,EAAW,CACP;AACA;AACH;AACJ,GATY,EASV,CAACT,GAAD,EAAMmB,QAAN,CATU,CAAb;AAUA,SAAO,CAACD,KAAD,EAAQE,GAAR,EAAaI,MAAb,CAAP;AACH,CAnED;;AAoEA/B,OAAO,CAACkC,OAAR,GAAkB5B,eAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar util_1 = require(\"./util\");\nvar noop = function () { };\nvar useLocalStorage = function (key, initialValue, options) {\n    if (!util_1.isClient) {\n        return [initialValue, noop, noop];\n    }\n    if (!key) {\n        throw new Error('useLocalStorage key may not be falsy');\n    }\n    var deserializer = options ? (options.raw ? function (value) { return value; } : options.deserializer) : JSON.parse;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var _a = react_1.useState(function () {\n        try {\n            var serializer = options ? (options.raw ? String : options.serializer) : JSON.stringify;\n            var localStorageValue = localStorage.getItem(key);\n            if (localStorageValue !== null) {\n                return deserializer(localStorageValue);\n            }\n            else {\n                initialValue && localStorage.setItem(key, serializer(initialValue));\n                return initialValue;\n            }\n        }\n        catch (_a) {\n            // If user is in private mode or has storage restriction\n            // localStorage can throw. JSON.parse and JSON.stringify\n            // can throw, too.\n            return initialValue;\n        }\n    }), state = _a[0], setState = _a[1];\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var set = react_1.useCallback(function (valOrFunc) {\n        try {\n            var newState = typeof valOrFunc === 'function' ? valOrFunc(state) : valOrFunc;\n            if (typeof newState === 'undefined')\n                return;\n            var value = void 0;\n            if (options)\n                if (options.raw)\n                    if (typeof newState === 'string')\n                        value = newState;\n                    else\n                        value = JSON.stringify(newState);\n                else if (options.serializer)\n                    value = options.serializer(newState);\n                else\n                    value = JSON.stringify(newState);\n            else\n                value = JSON.stringify(newState);\n            localStorage.setItem(key, value);\n            setState(deserializer(value));\n        }\n        catch (_a) {\n            // If user is in private mode or has storage restriction\n            // localStorage can throw. Also JSON.stringify can throw.\n        }\n    }, [key, setState]);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var remove = react_1.useCallback(function () {\n        try {\n            localStorage.removeItem(key);\n            setState(undefined);\n        }\n        catch (_a) {\n            // If user is in private mode or has storage restriction\n            // localStorage can throw.\n        }\n    }, [key, setState]);\n    return [state, set, remove];\n};\nexports.default = useLocalStorage;\n"]},"metadata":{},"sourceType":"script"}