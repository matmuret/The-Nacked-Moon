{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar copy_to_clipboard_1 = tslib_1.__importDefault(require(\"copy-to-clipboard\"));\n\nvar react_1 = require(\"react\");\n\nvar useMountedState_1 = tslib_1.__importDefault(require(\"./useMountedState\"));\n\nvar useSetState_1 = tslib_1.__importDefault(require(\"./useSetState\"));\n\nvar useCopyToClipboard = function () {\n  var isMounted = useMountedState_1.default();\n\n  var _a = useSetState_1.default({\n    value: undefined,\n    error: undefined,\n    noUserInteraction: true\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var copyToClipboard = react_1.useCallback(function (value) {\n    if (!isMounted()) {\n      return;\n    }\n\n    var noUserInteraction;\n    var normalizedValue;\n\n    try {\n      // only strings and numbers casted to strings can be copied to clipboard\n      if (typeof value !== 'string' && typeof value !== 'number') {\n        var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n        if (process.env.NODE_ENV === 'development') console.error(error);\n        setState({\n          value: value,\n          error: error,\n          noUserInteraction: true\n        });\n        return;\n      } // empty strings are also considered invalid\n      else if (value === '') {\n          var error = new Error(\"Cannot copy empty string to clipboard.\");\n          if (process.env.NODE_ENV === 'development') console.error(error);\n          setState({\n            value: value,\n            error: error,\n            noUserInteraction: true\n          });\n          return;\n        }\n\n      normalizedValue = value.toString();\n      noUserInteraction = copy_to_clipboard_1.default(normalizedValue);\n      setState({\n        value: normalizedValue,\n        error: undefined,\n        noUserInteraction: noUserInteraction\n      });\n    } catch (error) {\n      setState({\n        value: normalizedValue,\n        error: error,\n        noUserInteraction: noUserInteraction\n      });\n    }\n  }, []);\n  return [state, copyToClipboard];\n};\n\nexports.default = useCopyToClipboard;","map":{"version":3,"sources":["/Users/filippo/Documents/DCI/myProjects/TheNakedMoon/Frontend/node_modules/react-use/lib/useCopyToClipboard.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","copy_to_clipboard_1","__importDefault","react_1","useMountedState_1","useSetState_1","useCopyToClipboard","isMounted","default","_a","undefined","error","noUserInteraction","state","setState","copyToClipboard","useCallback","normalizedValue","Error","process","env","NODE_ENV","console","toString"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar copy_to_clipboard_1 = tslib_1.__importDefault(require(\"copy-to-clipboard\"));\nvar react_1 = require(\"react\");\nvar useMountedState_1 = tslib_1.__importDefault(require(\"./useMountedState\"));\nvar useSetState_1 = tslib_1.__importDefault(require(\"./useSetState\"));\nvar useCopyToClipboard = function () {\n    var isMounted = useMountedState_1.default();\n    var _a = useSetState_1.default({\n        value: undefined,\n        error: undefined,\n        noUserInteraction: true,\n    }), state = _a[0], setState = _a[1];\n    var copyToClipboard = react_1.useCallback(function (value) {\n        if (!isMounted()) {\n            return;\n        }\n        var noUserInteraction;\n        var normalizedValue;\n        try {\n            // only strings and numbers casted to strings can be copied to clipboard\n            if (typeof value !== 'string' && typeof value !== 'number') {\n                var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n                if (process.env.NODE_ENV === 'development')\n                    console.error(error);\n                setState({\n                    value: value,\n                    error: error,\n                    noUserInteraction: true,\n                });\n                return;\n            }\n            // empty strings are also considered invalid\n            else if (value === '') {\n                var error = new Error(\"Cannot copy empty string to clipboard.\");\n                if (process.env.NODE_ENV === 'development')\n                    console.error(error);\n                setState({\n                    value: value,\n                    error: error,\n                    noUserInteraction: true,\n                });\n                return;\n            }\n            normalizedValue = value.toString();\n            noUserInteraction = copy_to_clipboard_1.default(normalizedValue);\n            setState({\n                value: normalizedValue,\n                error: undefined,\n                noUserInteraction: noUserInteraction,\n            });\n        }\n        catch (error) {\n            setState({\n                value: normalizedValue,\n                error: error,\n                noUserInteraction: noUserInteraction,\n            });\n        }\n    }, []);\n    return [state, copyToClipboard];\n};\nexports.default = useCopyToClipboard;\n"]},"metadata":{},"sourceType":"script"}