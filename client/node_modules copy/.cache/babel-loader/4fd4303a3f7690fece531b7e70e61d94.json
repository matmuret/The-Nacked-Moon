{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar useList_1 = tslib_1.__importDefault(require(\"./useList\"));\n/**\n * @deprecated Use `useList` hook's upsert action instead\n */\n\n\nfunction useUpsert(predicate, initialList) {\n  if (initialList === void 0) {\n    initialList = [];\n  }\n\n  var _a = useList_1.default(initialList),\n      list = _a[0],\n      listActions = _a[1];\n\n  return [list, tslib_1.__assign(tslib_1.__assign({}, listActions), {\n    upsert: function upsert(newItem) {\n      listActions.upsert(predicate, newItem);\n    }\n  })];\n}\n\nexports.default = useUpsert;","map":{"version":3,"sources":["/Users/filippo/Documents/DCI/myProjects/TheNakedMoon/Frontend/node_modules/react-use/lib/useUpsert.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","useList_1","__importDefault","useUpsert","predicate","initialList","_a","default","list","listActions","__assign","upsert","newItem"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,SAAS,GAAGF,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,WAAD,CAA/B,CAAhB;AACA;AACA;AACA;;;AACA,SAASG,SAAT,CAAmBC,SAAnB,EAA8BC,WAA9B,EAA2C;AACvC,MAAIA,WAAW,KAAK,KAAK,CAAzB,EAA4B;AAAEA,IAAAA,WAAW,GAAG,EAAd;AAAmB;;AACjD,MAAIC,EAAE,GAAGL,SAAS,CAACM,OAAV,CAAkBF,WAAlB,CAAT;AAAA,MAAyCG,IAAI,GAAGF,EAAE,CAAC,CAAD,CAAlD;AAAA,MAAuDG,WAAW,GAAGH,EAAE,CAAC,CAAD,CAAvE;;AACA,SAAO,CACHE,IADG,EAEHT,OAAO,CAACW,QAAR,CAAiBX,OAAO,CAACW,QAAR,CAAiB,EAAjB,EAAqBD,WAArB,CAAjB,EAAoD;AAAEE,IAAAA,MAAM,EAAE,gBAAUC,OAAV,EAAmB;AACzEH,MAAAA,WAAW,CAACE,MAAZ,CAAmBP,SAAnB,EAA8BQ,OAA9B;AACH;AAF+C,GAApD,CAFG,CAAP;AAMH;;AACDf,OAAO,CAACU,OAAR,GAAkBJ,SAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar useList_1 = tslib_1.__importDefault(require(\"./useList\"));\n/**\n * @deprecated Use `useList` hook's upsert action instead\n */\nfunction useUpsert(predicate, initialList) {\n    if (initialList === void 0) { initialList = []; }\n    var _a = useList_1.default(initialList), list = _a[0], listActions = _a[1];\n    return [\n        list,\n        tslib_1.__assign(tslib_1.__assign({}, listActions), { upsert: function (newItem) {\n                listActions.upsert(predicate, newItem);\n            } }),\n    ];\n}\nexports.default = useUpsert;\n"]},"metadata":{},"sourceType":"script"}